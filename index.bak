<!DOCTYPE html>
<html lang="en-us">
  <head>
    <meta charset="UTF-8">
    <title>Shout to Me Android SDK</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" type="text/css" href="stylesheets/normalize.css" media="screen">
    <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>
    <link rel="stylesheet" type="text/css" href="stylesheets/stylesheet.css" media="screen">
    <link rel="stylesheet" type="text/css" href="stylesheets/github-light.css" media="screen">
  </head>
  <body>
    <section class="page-header">
      <h1 class="project-name">Shout to Me Android SDK</h1>
      <h2 class="project-tagline">An Android SDK that can be used to consume the Shout to Me cloud services</h2>
      <a href="https://github.com/ShoutToMe/stm-sdk-android" class="btn">View on GitHub</a>
      <a href="https://github.com/ShoutToMe/stm-sdk-android/zipball/master" class="btn">Download .zip</a>
      <a href="https://github.com/ShoutToMe/stm-sdk-android/tarball/master" class="btn">Download .tar.gz</a>
    </section>

    <section class="main-content">
      <h1>
<a id="shout-to-me-android-sdk" class="anchor" href="#shout-to-me-android-sdk" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Shout to Me Android SDK</h1>

<p><em>Version 1.0.6</em></p>

<h2>
<a id="quickstart-guide" class="anchor" href="#quickstart-guide" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Quickstart Guide</h2>

<p>This guide will show you how to get up and running with the Shout to Me Android SDK in minutes.</p>

<h3>
<a id="prerequisites" class="anchor" href="#prerequisites" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Prerequisites</h3>

<ul>
<li>A Shout to Me client access token</li>
<li>
<a href="http://developer.android.com/tools/studio/index.html">Android Studio</a> and all its dependencies. This quickstart guide was developed using Android Studio version 2.1.2</li>
</ul>

<h3>
<a id="create-an-android-application" class="anchor" href="#create-an-android-application" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Create an Android application</h3>

<p>Run through the Android Studio’s Create New Project wizard.  The minimum Android SDK required is <strong>API 15: Android 4.0.3 (IceCreamSandwich)</strong>.  Choose "Empty Activity" on the "Add an Activity to Mobile" screen.  For the rest of the options, you can leave them set to their defaults.</p>

<p><img src="https://s3-us-west-2.amazonaws.com/sdk-public-images/as-new-project-1.png" alt="Create new project step 1"></p>

<p><img src="https://s3-us-west-2.amazonaws.com/sdk-public-images/as-new-project-2.png" alt="Create new project step 2"></p>

<p><img src="https://s3-us-west-2.amazonaws.com/sdk-public-images/as-new-project-3.png" alt="Create new project step 3"></p>

<p><img src="https://s3-us-west-2.amazonaws.com/sdk-public-images/as-new-project-4.png" alt="Create new project step 4"></p>

<h3>
<a id="add-the-shout-to-me-android-sdk" class="anchor" href="#add-the-shout-to-me-android-sdk" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Add the Shout to Me Android SDK</h3>

<ol>
<li>In Android Studio, navigate to <strong>File &gt; New &gt; New Module</strong>
</li>
<li>Select <strong>Import .JAR/.AAR Package</strong> then click <strong>Next</strong>
</li>
<li>Enter the location of the <strong>shout-to-me-sdk-release.aar</strong> file and then click <strong>Finish</strong>
</li>
</ol>

<p>Add the following to your app/build.gradle file dependencies section:</p>

<div class="highlight highlight-source-groovy-gradle"><pre><span class="pl-en">dependencies</span> {
    <span class="pl-k">..</span>.

    compile project(<span class="pl-s"><span class="pl-pds">"</span>:shout-to-me-sdk-release<span class="pl-pds">"</span></span>)
    compile <span class="pl-s"><span class="pl-pds">'</span>com.google.android.gms:play-services:9.6.0<span class="pl-pds">'</span></span>
    compile <span class="pl-s"><span class="pl-pds">'</span>com.android.volley:volley:1.0.0<span class="pl-pds">'</span></span>
    compile <span class="pl-s"><span class="pl-pds">'</span>com.amazonaws:aws-android-sdk-core:2.2.+<span class="pl-pds">'</span></span>
    compile <span class="pl-s"><span class="pl-pds">'</span>com.amazonaws:aws-android-sdk-sns:2.2.+<span class="pl-pds">'</span></span>
}</pre></div>

<p>(Note the additional dependency on Google Play Services, Volley, and AWS)</p>

<p>Then click:  <strong>Tools &gt; Android &gt; Sync Project with Gradle Files</strong></p>

<h3>
<a id="add-your-shout-to-me-client-token-to-androidmanifestxml" class="anchor" href="#add-your-shout-to-me-client-token-to-androidmanifestxml" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Add your Shout to Me client token to AndroidManifest.xml</h3>

<p>Add the following section into the &lt;application&gt; node of your AndroidManifest.xml.</p>

<div class="highlight highlight-text-xml"><pre>&lt;<span class="pl-ent">service</span>
    <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>me.shoutto.sdk.StmService<span class="pl-pds">"</span></span>
    <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">exported</span>=<span class="pl-s"><span class="pl-pds">"</span>false<span class="pl-pds">"</span></span>&gt;

    &lt;<span class="pl-ent">meta-data</span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>me.shoutto.sdk.CLIENT_TOKEN<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>@string/client_token<span class="pl-pds">"</span></span> /&gt;

    &lt;<span class="pl-ent">meta-data</span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>me.shoutto.sdk.CHANNEL_ID<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>@string/channel_id<span class="pl-pds">"</span></span> /&gt;
&lt;/<span class="pl-ent">service</span>&gt;</pre></div>

<p>And then add the following to your app/src/main/res/values/strings.xml file:</p>

<div class="highlight highlight-text-xml"><pre>&lt;<span class="pl-ent">string</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>client_token<span class="pl-pds">"</span></span>&gt;[Your client token]&lt;/<span class="pl-ent">string</span>&gt;
&lt;<span class="pl-ent">string</span> <span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>channel_id<span class="pl-pds">"</span></span>&gt;s2m-sandbox&lt;/<span class="pl-ent">string</span>&gt;</pre></div>

<h3>
<a id="use-the-shout-to-me-android-sdk" class="anchor" href="#use-the-shout-to-me-android-sdk" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Use the Shout to Me Android SDK</h3>

<p>You are now able to begin coding with the Shout to Me Android SDK.  Assuming you used the default names when creating the projects, modify the following files so they look like these:</p>

<p><strong>MainActivity.java</strong></p>

<div class="highlight highlight-source-java"><pre><span class="pl-k">package</span> <span class="pl-smi">com.mycompany.teststmsdk</span>;

<span class="pl-k">import</span> <span class="pl-smi">android.Manifest</span>;
<span class="pl-k">import</span> <span class="pl-smi">android.app.Dialog</span>;
<span class="pl-k">import</span> <span class="pl-smi">android.content.ComponentName</span>;
<span class="pl-k">import</span> <span class="pl-smi">android.content.Context</span>;
<span class="pl-k">import</span> <span class="pl-smi">android.content.Intent</span>;
<span class="pl-k">import</span> <span class="pl-smi">android.content.ServiceConnection</span>;
<span class="pl-k">import</span> <span class="pl-smi">android.os.IBinder</span>;
<span class="pl-k">import</span> <span class="pl-smi">android.support.v4.app.ActivityCompat</span>;
<span class="pl-k">import</span> <span class="pl-smi">android.support.v7.app.AppCompatActivity</span>;
<span class="pl-k">import</span> <span class="pl-smi">android.os.Bundle</span>;
<span class="pl-k">import</span> <span class="pl-smi">android.util.Log</span>;
<span class="pl-k">import</span> <span class="pl-smi">android.view.View</span>;
<span class="pl-k">import</span> <span class="pl-smi">android.widget.Button</span>;
<span class="pl-k">import</span> <span class="pl-smi">android.widget.EditText</span>;

<span class="pl-k">import</span> <span class="pl-smi">com.google.android.gms.common.ConnectionResult</span>;
<span class="pl-k">import</span> <span class="pl-smi">com.google.android.gms.common.GoogleApiAvailability</span>;

<span class="pl-k">import</span> <span class="pl-smi">me.shoutto.sdk.Callback</span>;
<span class="pl-k">import</span> <span class="pl-smi">me.shoutto.sdk.Shout</span>;
<span class="pl-k">import</span> <span class="pl-smi">me.shoutto.sdk.StmError</span>;
<span class="pl-k">import</span> <span class="pl-smi">me.shoutto.sdk.StmRecorderActivity</span>;
<span class="pl-k">import</span> <span class="pl-smi">me.shoutto.sdk.StmResponse</span>;
<span class="pl-k">import</span> <span class="pl-smi">me.shoutto.sdk.StmService</span>;
<span class="pl-k">import</span> <span class="pl-smi">me.shoutto.sdk.User</span>;

<span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">MainActivity</span> <span class="pl-k">extends</span> <span class="pl-e">AppCompatActivity</span> {

    <span class="pl-k">private</span> <span class="pl-k">static</span> <span class="pl-k">final</span> <span class="pl-smi">String</span> <span class="pl-c1">TAG</span> <span class="pl-k">=</span> <span class="pl-smi">MainActivity</span><span class="pl-k">.</span>class<span class="pl-k">.</span>getSimpleName();
    <span class="pl-k">private</span> <span class="pl-smi">StmService</span> stmService;
    <span class="pl-k">private</span> <span class="pl-smi">Boolean</span> isStmServiceBound <span class="pl-k">=</span> <span class="pl-c1">false</span>;
    <span class="pl-k">private</span> <span class="pl-smi">Shout</span> newlyCreatedShout;

    <span class="pl-k">@Override</span>
    <span class="pl-k">protected</span> <span class="pl-k">void</span> <span class="pl-en">onCreate</span>(<span class="pl-smi">Bundle</span> <span class="pl-v">savedInstanceState</span>) {
        <span class="pl-v">super</span><span class="pl-k">.</span>onCreate(savedInstanceState);
        setContentView(<span class="pl-smi">R</span><span class="pl-k">.</span>layout<span class="pl-k">.</span>activity_main);

        <span class="pl-c">// Intent to bind to the Shout to Me service</span>
        <span class="pl-smi">Intent</span> intent <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">Intent</span>(<span class="pl-v">this</span>, <span class="pl-smi">StmService</span><span class="pl-k">.</span>class);
        bindService(intent, stmServiceConnection, <span class="pl-smi">Context</span><span class="pl-c1"><span class="pl-k">.</span>BIND_AUTO_CREATE</span>);

        <span class="pl-c">// Show user a Dialog to update Google Play Services if required version is not installed</span>
        <span class="pl-smi">GoogleApiAvailability</span> googleApiAvailability <span class="pl-k">=</span> <span class="pl-smi">GoogleApiAvailability</span><span class="pl-k">.</span>getInstance();
        <span class="pl-k">int</span> val <span class="pl-k">=</span> googleApiAvailability<span class="pl-k">.</span>isGooglePlayServicesAvailable(<span class="pl-v">this</span>);
        <span class="pl-k">if</span> (val <span class="pl-k">!=</span> <span class="pl-smi">ConnectionResult</span><span class="pl-c1"><span class="pl-k">.</span>SUCCESS</span>) {
            <span class="pl-smi">Dialog</span> gpsErrorDialog <span class="pl-k">=</span> googleApiAvailability<span class="pl-k">.</span>getErrorDialog(<span class="pl-v">this</span>, val, <span class="pl-c1">2</span>);
            gpsErrorDialog<span class="pl-k">.</span>show();
        }

        <span class="pl-k">final</span> <span class="pl-smi">EditText</span> editText <span class="pl-k">=</span> (<span class="pl-smi">EditText</span>) findViewById(<span class="pl-smi">R</span><span class="pl-k">.</span>id<span class="pl-k">.</span>editTextUserHandle);
        editText<span class="pl-k">.</span>setOnClickListener(<span class="pl-k">new</span> <span class="pl-smi">View</span>.<span class="pl-smi">OnClickListener</span>() {
            <span class="pl-k">@Override</span>
            <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onClick</span>(<span class="pl-smi">View</span> <span class="pl-v">v</span>) {
                editText<span class="pl-k">.</span>setError(<span class="pl-c1">null</span>);
            }
        });
    }

    <span class="pl-k">@Override</span>
    <span class="pl-k">protected</span> <span class="pl-k">void</span> <span class="pl-en">onDestroy</span>() {
        <span class="pl-v">super</span><span class="pl-k">.</span>onDestroy();

        <span class="pl-k">if</span> (isStmServiceBound) {
            unbindService(stmServiceConnection);
        }
    }

    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">launchRecordingOverlay</span>(<span class="pl-smi">View</span> <span class="pl-v">view</span>) {
        <span class="pl-k">if</span> (isStmServiceBound) {
            <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>Launching overlay<span class="pl-pds">"</span></span>);
            stmService<span class="pl-k">.</span>setShoutCreationCallback(<span class="pl-k">new</span> <span class="pl-k">Callback&lt;<span class="pl-smi">Shout</span>&gt;</span>() {
                <span class="pl-k">@Override</span>
                <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onSuccess</span>(<span class="pl-k">StmResponse&lt;<span class="pl-smi">Shout</span>&gt;</span> <span class="pl-v">stmResponse</span>) {
                    <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>Shout created successfully. ID = <span class="pl-pds">"</span></span> <span class="pl-k">+</span> stmResponse<span class="pl-k">.</span>get()<span class="pl-k">.</span>getId());
                    newlyCreatedShout <span class="pl-k">=</span> stmResponse<span class="pl-k">.</span>get();
                    showDeleteButton();
                }

                <span class="pl-k">@Override</span>
                <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onFailure</span>(<span class="pl-smi">StmError</span> <span class="pl-v">stmError</span>) {
                    <span class="pl-smi">Log</span><span class="pl-k">.</span>e(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>An error occurred during shout creation. Message is <span class="pl-pds">"</span></span> <span class="pl-k">+</span> stmError<span class="pl-k">.</span>getMessage());
                }
            });

            <span class="pl-smi">Intent</span> intent <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">Intent</span>(<span class="pl-v">this</span>, <span class="pl-smi">StmRecorderActivity</span><span class="pl-k">.</span>class);

            <span class="pl-c">// REQUIRED: Set the maximum length of recording time allowed in seconds.</span>
            intent<span class="pl-k">.</span>putExtra(<span class="pl-smi">StmRecorderActivity</span><span class="pl-c1"><span class="pl-k">.</span>MAX_RECORDING_TIME_IN_SECONDS</span>, <span class="pl-c1">15</span>);

            startActivityForResult(intent, <span class="pl-c1">1</span>);
        }
    }

    <span class="pl-k">protected</span> <span class="pl-k">void</span> <span class="pl-en">onActivityResult</span>(<span class="pl-k">int</span> <span class="pl-v">requestCode</span>, <span class="pl-k">int</span> <span class="pl-v">resultCode</span>, <span class="pl-smi">Intent</span> <span class="pl-v">data</span>) {

        <span class="pl-k">if</span> (requestCode <span class="pl-k">==</span> <span class="pl-c1">1</span>) {
            <span class="pl-k">if</span>(resultCode <span class="pl-k">==</span> <span class="pl-c1">RESULT_OK</span>){
                <span class="pl-smi">String</span> result <span class="pl-k">=</span> data<span class="pl-k">.</span>getStringExtra(<span class="pl-smi">StmRecorderActivity</span><span class="pl-c1"><span class="pl-k">.</span>ACTIVITY_RESULT</span>);
                <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>The recording overlay has closed successfully. Result is: <span class="pl-pds">"</span></span> <span class="pl-k">+</span> result);

                <span class="pl-k">if</span> (result<span class="pl-k">.</span>equals(<span class="pl-smi">StmService</span><span class="pl-c1"><span class="pl-k">.</span>FAILURE</span>)) {
                    <span class="pl-smi">String</span> failureReasonCode <span class="pl-k">=</span> data<span class="pl-k">.</span>getStringExtra(<span class="pl-smi">StmRecorderActivity</span><span class="pl-c1"><span class="pl-k">.</span>ACTIVITY_REASON</span>);
                    <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>Failure code: <span class="pl-pds">"</span></span> <span class="pl-k">+</span> failureReasonCode);
                    <span class="pl-k">if</span> (failureReasonCode<span class="pl-k">.</span>equals(<span class="pl-smi">StmRecorderActivity</span><span class="pl-c1"><span class="pl-k">.</span>RECORD_AUDIO_PERMISSION_DENIED</span>)) {

                        <span class="pl-c">// User has not granted access to record audio.  Ask the user for permission now.</span>
                        <span class="pl-smi">ActivityCompat</span><span class="pl-k">.</span>requestPermissions(<span class="pl-v">this</span>, <span class="pl-k">new</span> <span class="pl-smi">String</span>[] { <span class="pl-smi">Manifest</span><span class="pl-k">.</span><span class="pl-smi">permission<span class="pl-k">.</span>RECORD_AUDIO</span> }, <span class="pl-c1">0</span>);
                    }
                }
            }
            <span class="pl-k">if</span> (resultCode <span class="pl-k">==</span> <span class="pl-c1">RESULT_CANCELED</span>) {
                <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>Recording was cancelled<span class="pl-pds">"</span></span>);
            }
        }
    }

    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">setUserHandle</span>(<span class="pl-smi">View</span> <span class="pl-v">view</span>) {
        <span class="pl-k">if</span> (isStmServiceBound) {
            <span class="pl-k">final</span> <span class="pl-smi">EditText</span> editText <span class="pl-k">=</span> (<span class="pl-smi">EditText</span>)findViewById(<span class="pl-smi">R</span><span class="pl-k">.</span>id<span class="pl-k">.</span>editTextUserHandle);
            <span class="pl-smi">String</span> newHandle <span class="pl-k">=</span> editText<span class="pl-k">.</span>getText()<span class="pl-k">.</span>toString();

            <span class="pl-c">// Calling getUser() without a Callback does not guarantee that the object will be</span>
            <span class="pl-c">// instantiated from the server, but is useful for update-only functions.</span>
            <span class="pl-smi">User</span> user <span class="pl-k">=</span> stmService<span class="pl-k">.</span>getUser();
            user<span class="pl-k">.</span>setHandle(newHandle);
            user<span class="pl-k">.</span>save(<span class="pl-k">new</span> <span class="pl-k">Callback&lt;<span class="pl-smi">User</span>&gt;</span>() {
                <span class="pl-k">@Override</span>
                <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onSuccess</span>(<span class="pl-k">final</span> <span class="pl-k">StmResponse&lt;<span class="pl-smi">User</span>&gt;</span> <span class="pl-v">stmResponse</span>) {
                    <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>User handle update was successful. Handle is <span class="pl-pds">"</span></span> <span class="pl-k">+</span> stmResponse<span class="pl-k">.</span>get()<span class="pl-k">.</span>getHandle());
                    <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>stmReponse.get() &amp;&amp; stmService.getUser() point to the same object. <span class="pl-pds">"</span></span>
                            <span class="pl-k">+</span> (stmResponse<span class="pl-k">.</span>get() <span class="pl-k">==</span> stmService<span class="pl-k">.</span>getUser()));
                    editText<span class="pl-k">.</span>setError(<span class="pl-c1">null</span>);
                    editText<span class="pl-k">.</span>setText(stmService<span class="pl-k">.</span>getUser()<span class="pl-k">.</span>getHandle());
                }

                <span class="pl-k">@Override</span>
                <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onFailure</span>(<span class="pl-k">final</span> <span class="pl-smi">StmError</span> <span class="pl-v">stmError</span>) {
                    editText<span class="pl-k">.</span>setError(stmError<span class="pl-k">.</span>getMessage());
                    editText<span class="pl-k">.</span>setText(stmService<span class="pl-k">.</span>getUser()<span class="pl-k">.</span>getHandle());
                }
            });
        }
    }

    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">deleteShout</span>(<span class="pl-smi">View</span> <span class="pl-v">view</span>) {
        <span class="pl-k">if</span> (newlyCreatedShout <span class="pl-k">!=</span> <span class="pl-c1">null</span>) {
            <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>Deleting shout <span class="pl-pds">"</span></span> <span class="pl-k">+</span> newlyCreatedShout<span class="pl-k">.</span>getId());
            newlyCreatedShout<span class="pl-k">.</span>delete(<span class="pl-k">new</span> <span class="pl-k">Callback&lt;<span class="pl-smi">String</span>&gt;</span>() {
                <span class="pl-k">@Override</span>
                <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onSuccess</span>(<span class="pl-k">StmResponse&lt;<span class="pl-smi">String</span>&gt;</span> <span class="pl-v">stmResponse</span>) {
                    <span class="pl-k">if</span> (stmResponse<span class="pl-k">.</span>get()<span class="pl-k">.</span>equals(<span class="pl-smi">StmService</span><span class="pl-c1"><span class="pl-k">.</span>SUCCESS</span>)) {
                        <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>Deletion of shout succeeded.<span class="pl-pds">"</span></span>);
                        hideDeleteButton();
                    }
                }

                <span class="pl-k">@Override</span>
                <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onFailure</span>(<span class="pl-smi">StmError</span> <span class="pl-v">stmError</span>) {
                    <span class="pl-smi">Log</span><span class="pl-k">.</span>e(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>Error occurred deleting shout. Error message: <span class="pl-pds">"</span></span> <span class="pl-k">+</span> stmError<span class="pl-k">.</span>getMessage());
                }
            });
        }
    }

    <span class="pl-k">private</span> <span class="pl-k">void</span> <span class="pl-en">showDeleteButton</span>() {
        <span class="pl-smi">Button</span> deleteButton <span class="pl-k">=</span> (<span class="pl-smi">Button</span>) findViewById(<span class="pl-smi">R</span><span class="pl-k">.</span>id<span class="pl-k">.</span>deleteShoutButton);
        deleteButton<span class="pl-k">.</span>setVisibility(<span class="pl-smi">View</span><span class="pl-c1"><span class="pl-k">.</span>VISIBLE</span>);
    }

    <span class="pl-k">private</span> <span class="pl-k">void</span> <span class="pl-en">hideDeleteButton</span>() {
        <span class="pl-smi">Button</span> deleteButton <span class="pl-k">=</span> (<span class="pl-smi">Button</span>) findViewById(<span class="pl-smi">R</span><span class="pl-k">.</span>id<span class="pl-k">.</span>deleteShoutButton);
        deleteButton<span class="pl-k">.</span>setVisibility(<span class="pl-smi">View</span><span class="pl-c1"><span class="pl-k">.</span>INVISIBLE</span>);
    }

    <span class="pl-k">private</span> <span class="pl-smi">ServiceConnection</span> stmServiceConnection <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">ServiceConnection</span>() {

        <span class="pl-k">@Override</span>
        <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onServiceConnected</span>(<span class="pl-smi">ComponentName</span> <span class="pl-v">className</span>,
                                       <span class="pl-smi">IBinder</span> <span class="pl-v">service</span>) {
            <span class="pl-c">// We've bound to StmService, cast the IBinder and get StmService instance</span>
            <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>in onServiceConnected<span class="pl-pds">"</span></span>);
            <span class="pl-smi">StmService</span><span class="pl-k">.</span><span class="pl-smi">StmBinder</span> binder <span class="pl-k">=</span> (<span class="pl-smi">StmService</span><span class="pl-k">.</span><span class="pl-smi">StmBinder</span>) service;
            stmService <span class="pl-k">=</span> binder<span class="pl-k">.</span>getService();
            isStmServiceBound <span class="pl-k">=</span> <span class="pl-c1">true</span>;

            <span class="pl-c">// You can also set the channel programmatically if you have access to more than one channel</span>
            <span class="pl-c">// stmService.setChannelId("s2m-sandbox");</span>

            <span class="pl-c">// Get a reference to the UI text box</span>
            <span class="pl-k">final</span> <span class="pl-smi">EditText</span> handleEditText <span class="pl-k">=</span> (<span class="pl-smi">EditText</span>) findViewById(<span class="pl-smi">R</span><span class="pl-k">.</span>id<span class="pl-k">.</span>editTextUserHandle);

            <span class="pl-c">// Calling getUser() with a Callback will ensure you get an instantiated user object from the server</span>
            stmService<span class="pl-k">.</span>getUser(<span class="pl-k">new</span> <span class="pl-k">Callback&lt;<span class="pl-smi">User</span>&gt;</span>() {
                <span class="pl-k">@Override</span>
                <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onSuccess</span>(<span class="pl-k">final</span> <span class="pl-k">StmResponse&lt;<span class="pl-smi">User</span>&gt;</span> <span class="pl-v">stmResponse</span>) {
                    <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>Shout to Me user has been loaded<span class="pl-pds">"</span></span>);
                    handleEditText<span class="pl-k">.</span>setText(stmResponse<span class="pl-k">.</span>get()<span class="pl-k">.</span>getHandle());
                }

                <span class="pl-k">@Override</span>
                <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onFailure</span>(<span class="pl-k">final</span> <span class="pl-smi">StmError</span> <span class="pl-v">stmError</span>) {
                    <span class="pl-smi">Log</span><span class="pl-k">.</span>w(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>Could not retrieve Shout to Me user.<span class="pl-pds">"</span></span>);
                }
            });
        }

        <span class="pl-k">@Override</span>
        <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onServiceDisconnected</span>(<span class="pl-smi">ComponentName</span> <span class="pl-v">arg0</span>) {
            isStmServiceBound <span class="pl-k">=</span> <span class="pl-c1">false</span>;
        }
    };
}</pre></div>

<p><strong>activity_main.xml</strong></p>

<div class="highlight highlight-text-xml"><pre>&lt;?<span class="pl-ent">xml</span><span class="pl-e"> version</span>=<span class="pl-s"><span class="pl-pds">"</span>1.0<span class="pl-pds">"</span></span><span class="pl-e"> encoding</span>=<span class="pl-s"><span class="pl-pds">"</span>utf-8<span class="pl-pds">"</span></span>?&gt;
&lt;<span class="pl-ent">RelativeLayout</span> <span class="pl-e">xmlns</span><span class="pl-e">:</span><span class="pl-e">android</span>=<span class="pl-s"><span class="pl-pds">"</span>http://schemas.android.com/apk/res/android<span class="pl-pds">"</span></span>
    <span class="pl-e">xmlns</span><span class="pl-e">:</span><span class="pl-e">tools</span>=<span class="pl-s"><span class="pl-pds">"</span>http://schemas.android.com/tools<span class="pl-pds">"</span></span>
    <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_width</span>=<span class="pl-s"><span class="pl-pds">"</span>match_parent<span class="pl-pds">"</span></span>
    <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_height</span>=<span class="pl-s"><span class="pl-pds">"</span>match_parent<span class="pl-pds">"</span></span>
    <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">paddingBottom</span>=<span class="pl-s"><span class="pl-pds">"</span>@dimen/activity_vertical_margin<span class="pl-pds">"</span></span>
    <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">paddingLeft</span>=<span class="pl-s"><span class="pl-pds">"</span>@dimen/activity_horizontal_margin<span class="pl-pds">"</span></span>
    <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">paddingRight</span>=<span class="pl-s"><span class="pl-pds">"</span>@dimen/activity_horizontal_margin<span class="pl-pds">"</span></span>
    <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">paddingTop</span>=<span class="pl-s"><span class="pl-pds">"</span>@dimen/activity_vertical_margin<span class="pl-pds">"</span></span>
    <span class="pl-e">tools</span><span class="pl-e">:</span><span class="pl-e">context</span>=<span class="pl-s"><span class="pl-pds">"</span>com.mycompany.teststmsdk.MainActivity<span class="pl-pds">"</span></span>&gt;

    &lt;<span class="pl-ent">TextView</span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_width</span>=<span class="pl-s"><span class="pl-pds">"</span>wrap_content<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_height</span>=<span class="pl-s"><span class="pl-pds">"</span>wrap_content<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">text</span>=<span class="pl-s"><span class="pl-pds">"</span>Hello World!<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>@+id/textView<span class="pl-pds">"</span></span>/&gt;

    &lt;<span class="pl-ent">EditText</span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_width</span>=<span class="pl-s"><span class="pl-pds">"</span>wrap_content<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_height</span>=<span class="pl-s"><span class="pl-pds">"</span>wrap_content<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>@+id/editTextUserHandle<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">inputType</span>=<span class="pl-s"><span class="pl-pds">"</span>textNoSuggestions<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_below</span>=<span class="pl-s"><span class="pl-pds">"</span>@id/textView<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_alignParentLeft</span>=<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_alignParentStart</span>=<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_marginTop</span>=<span class="pl-s"><span class="pl-pds">"</span>118dp<span class="pl-pds">"</span></span> /&gt;

    &lt;<span class="pl-ent">Button</span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_width</span>=<span class="pl-s"><span class="pl-pds">"</span>wrap_content<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_height</span>=<span class="pl-s"><span class="pl-pds">"</span>wrap_content<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">text</span>=<span class="pl-s"><span class="pl-pds">"</span>Change Handle<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>@+id/button<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_below</span>=<span class="pl-s"><span class="pl-pds">"</span>@id/editTextUserHandle<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_alignParentLeft</span>=<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_alignParentStart</span>=<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">onClick</span>=<span class="pl-s"><span class="pl-pds">"</span>setUserHandle<span class="pl-pds">"</span></span> /&gt;

    &lt;<span class="pl-ent">Button</span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_width</span>=<span class="pl-s"><span class="pl-pds">"</span>wrap_content<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_height</span>=<span class="pl-s"><span class="pl-pds">"</span>wrap_content<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">text</span>=<span class="pl-s"><span class="pl-pds">"</span>Delete Last Shout<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>@+id/deleteShoutButton<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_toRightOf</span>=<span class="pl-s"><span class="pl-pds">"</span>@id/button<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_marginTop</span>=<span class="pl-s"><span class="pl-pds">"</span>71dp<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">onClick</span>=<span class="pl-s"><span class="pl-pds">"</span>deleteShout<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">visibility</span>=<span class="pl-s"><span class="pl-pds">"</span>invisible<span class="pl-pds">"</span></span> /&gt;

    &lt;<span class="pl-ent">Button</span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_width</span>=<span class="pl-s"><span class="pl-pds">"</span>wrap_content<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_height</span>=<span class="pl-s"><span class="pl-pds">"</span>wrap_content<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">text</span>=<span class="pl-s"><span class="pl-pds">"</span>Record a Shout<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">id</span>=<span class="pl-s"><span class="pl-pds">"</span>@+id/startRecording<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_alignParentLeft</span>=<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_alignParentStart</span>=<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">layout_marginTop</span>=<span class="pl-s"><span class="pl-pds">"</span>71dp<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">onClick</span>=<span class="pl-s"><span class="pl-pds">"</span>launchRecordingOverlay<span class="pl-pds">"</span></span> /&gt;

&lt;/<span class="pl-ent">RelativeLayout</span>&gt;</pre></div>

<p>After the code has been modified, click <strong>Run -&gt; Run 'app'</strong> to build and start the app.  You should see the initial Activity with the Start Recording button enabled.  When you press that button, it will launch the Shout to Me recording overlay as seen in the following images and immediately begin recording. Pressing the Done button on the overlay will transmit the recorded audio to the Shout to Me service for processing.</p>

<p><img src="https://s3-us-west-2.amazonaws.com/sdk-public-images/sample-app-3.png" alt="Sample app">
<img src="https://s3-us-west-2.amazonaws.com/sdk-public-images/sample-app-4.png" alt="Shout to me overlay"></p>

<h2>
<a id="sdk-documentation" class="anchor" href="#sdk-documentation" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>SDK Documentation</h2>

<h3>
<a id="dependencies" class="anchor" href="#dependencies" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Dependencies</h3>

<h4>
<a id="google-play-services" class="anchor" href="#google-play-services" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Google Play Services</h4>

<p>The Shout to Me SDK utilizes <a href="https://developers.google.com/android/reference/com/google/android/gms/location/package-summary">Google Play Services Location Services</a>.  If the mobile user does not have the required Google Play Services, the application may not function properly.  Google Play Services provides a convenient mechanism to prompt the user to install or upgrade their Google Play Services if applicable.</p>

<div class="highlight highlight-source-java"><pre><span class="pl-smi">GoogleApiAvailability</span> googleApiAvailability <span class="pl-k">=</span> <span class="pl-smi">GoogleApiAvailability</span><span class="pl-k">.</span>getInstance();
<span class="pl-k">int</span> val <span class="pl-k">=</span> googleApiAvailability<span class="pl-k">.</span>isGooglePlayServicesAvailable(<span class="pl-v">this</span>);
<span class="pl-k">if</span> (val <span class="pl-k">!=</span> <span class="pl-smi">ConnectionResult</span><span class="pl-c1"><span class="pl-k">.</span>SUCCESS</span>) {
    <span class="pl-smi">Dialog</span> gpsErrorDialog <span class="pl-k">=</span> googleApiAvailability<span class="pl-k">.</span>getErrorDialog(<span class="pl-v">this</span>, val, <span class="pl-c1">2</span>);
    gpsErrorDialog<span class="pl-k">.</span>show();
}</pre></div>

<h4>
<a id="volley" class="anchor" href="#volley" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Volley</h4>

<p>The Shout to Me SDK utilizes Volley to optimize asynchronous communication with the API service.  For more information about volley, see the <a href="https://developer.android.com/training/volley/index.html">Android Volley documentation</a>.</p>

<h4>
<a id="amazon-web-services" class="anchor" href="#amazon-web-services" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Amazon Web Services</h4>

<p>The Shout to Me SDK utilizes AWS to send push notifications to mobile devices.  For more information about the Amazon Android AWS SDK, see the <a href="https://aws.amazon.com/mobile/sdk/">Amazon mobile SDK documentation</a>.</p>

<h3>
<a id="permissions" class="anchor" href="#permissions" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Permissions</h3>

<p>The Shout to Me SDK requests the following permissions in the manifest:</p>

<div class="highlight highlight-text-xml"><pre>&lt;<span class="pl-ent">uses-permission</span> <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>android.permission.INTERNET<span class="pl-pds">"</span></span> /&gt;
&lt;<span class="pl-ent">uses-permission</span> <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>android.permission.RECORD_AUDIO<span class="pl-pds">"</span></span> /&gt;
&lt;<span class="pl-ent">uses-permission</span> <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>android.permission.ACCESS_COARSE_LOCATION<span class="pl-pds">"</span></span> /&gt;
&lt;<span class="pl-ent">uses-permission</span> <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>android.permission.ACCESS_FINE_LOCATION<span class="pl-pds">"</span></span> /&gt;</pre></div>

<p>Beginning with API level 23 (6.0), <a href="https://developer.android.com/training/permissions/requesting.html">Android requires that certain permissions be requested at run time</a>. The Shout to Me SDK uses two permissions that fall into this category:</p>

<ol>
<li>Mic/Record Audio (Required)</li>
<li>Location (Optional)</li>
</ol>

<h4>
<a id="record-audio" class="anchor" href="#record-audio" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Record Audio</h4>

<p>Being that Shout to Me is an audio-based platform, this permission is considered required.  Launching the recording overlay without the permission will result in a failure response indicating that the record audio permission is denied.  Here is an example of one way to check for this permission and requesting it if not granted:</p>

<div class="highlight highlight-source-java"><pre><span class="pl-k">if</span> (<span class="pl-smi">ContextCompat</span><span class="pl-k">.</span>checkSelfPermission(<span class="pl-v">this</span>, <span class="pl-smi">Manifest</span><span class="pl-k">.</span><span class="pl-smi">permission<span class="pl-k">.</span>RECORD_AUDIO</span>) <span class="pl-k">!=</span> <span class="pl-smi">PackageManager</span><span class="pl-c1"><span class="pl-k">.</span>PERMISSION_GRANTED</span>) {
    <span class="pl-c">// User has not granted access to record audio.  Ask the user for permission now.</span>
    <span class="pl-smi">ActivityCompat</span><span class="pl-k">.</span>requestPermissions(<span class="pl-v">this</span>, <span class="pl-k">new</span> <span class="pl-smi">String</span>[] { <span class="pl-smi">Manifest</span><span class="pl-k">.</span><span class="pl-smi">permission<span class="pl-k">.</span>RECORD_AUDIO</span> }, <span class="pl-c1">0</span>);
}</pre></div>

<h4>
<a id="location" class="anchor" href="#location" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Location</h4>

<p>Use of location functionality is optional in the Shout to Me platform.  However, if location permission is enabled, the coordinates (lat/lon) of the person shouting are included with the Shout creation request and broadcasters will be able to see the location of the user.  </p>

<div class="highlight highlight-source-java"><pre><span class="pl-k">if</span> (<span class="pl-smi">ContextCompat</span><span class="pl-k">.</span>checkSelfPermission(<span class="pl-v">this</span>, <span class="pl-smi">Manifest</span><span class="pl-k">.</span><span class="pl-smi">permission<span class="pl-k">.</span>ACCESS_COARSE_LOCATION</span>) <span class="pl-k">!=</span> <span class="pl-smi">PackageManager</span><span class="pl-c1"><span class="pl-k">.</span>PERMISSION_GRANTED</span>
        <span class="pl-k">||</span> <span class="pl-smi">ContextCompat</span><span class="pl-k">.</span>checkSelfPermission(<span class="pl-v">this</span>, <span class="pl-smi">Manifest</span><span class="pl-k">.</span><span class="pl-smi">permission<span class="pl-k">.</span>ACCESS_FINE_LOCATION</span>) <span class="pl-k">!=</span> <span class="pl-smi">PackageManager</span><span class="pl-c1"><span class="pl-k">.</span>PERMISSION_GRANTED</span>) {
    <span class="pl-smi">ActivityCompat</span><span class="pl-k">.</span>requestPermissions(<span class="pl-v">this</span>, <span class="pl-k">new</span> <span class="pl-smi">String</span>[] { <span class="pl-smi">Manifest</span><span class="pl-k">.</span><span class="pl-smi">permission<span class="pl-k">.</span>ACCESS_COARSE_LOCATION</span>, <span class="pl-smi">Manifest</span><span class="pl-k">.</span><span class="pl-smi">permission<span class="pl-k">.</span>ACCESS_FINE_LOCATION</span> }, <span class="pl-c1">0</span>);
}</pre></div>

<p>If the user rejects the permission request, there is a way to explain the rationale for the request.  This is beyond the scope of this document.  More information can be found in the <a href="https://developer.android.com/training/permissions/requesting.html#perm-request">Android - Request Permissions documentation</a>. </p>

<h3>
<a id="stmservice" class="anchor" href="#stmservice" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>StmService</h3>

<p>The StmService class is the object developers will use to establish integration with the Shout to Me system.  It is implemented as a <a href="http://developer.android.com/guide/components/bound-services.html">bound service</a> in Android to provide developers with a convenient, native way to integrate with. Here is an example of one way to check for this permission and requesting it if not granted:</p>

<div class="highlight highlight-source-java"><pre><span class="pl-c">/**</span>
<span class="pl-c"> * StmService</span>
<span class="pl-c"> * Main class to access Shout to Me SDK functionality</span>
<span class="pl-c"> * Requires a client access token</span>
<span class="pl-c"> */</span>
<span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">StmService</span> <span class="pl-k">extends</span> <span class="pl-e">Service</span></pre></div>

<p>Sample binding with StmService through the Android ServiceConnection class</p>

<div class="highlight highlight-source-java"><pre><span class="pl-k">private</span> <span class="pl-smi">ServiceConnection</span> stmServiceConnection <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">ServiceConnection</span>() {

    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onServiceConnected</span>(<span class="pl-smi">ComponentName</span> <span class="pl-v">className</span>,
                                   <span class="pl-smi">IBinder</span> <span class="pl-v">service</span>) {
        <span class="pl-c">// We've bound to StmService, cast the IBinder and get StmService instance</span>
        <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>in onServiceConnected<span class="pl-pds">"</span></span>);
        <span class="pl-smi">StmService</span><span class="pl-k">.</span><span class="pl-smi">StmBinder</span> binder <span class="pl-k">=</span> (<span class="pl-smi">StmService</span><span class="pl-k">.</span><span class="pl-smi">StmBinder</span>) service;
        stmService <span class="pl-k">=</span> binder<span class="pl-k">.</span>getService();
        isStmServiceBound <span class="pl-k">=</span> <span class="pl-c1">true</span>;
    }

    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onServiceDisconnected</span>(<span class="pl-smi">ComponentName</span> <span class="pl-v">arg0</span>) {
        isStmServiceBound <span class="pl-k">=</span> <span class="pl-c1">false</span>;
    }
};

<span class="pl-c">// Bind to StmService</span>
<span class="pl-smi">Intent</span> intent <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">Intent</span>(<span class="pl-v">this</span>, <span class="pl-smi">StmService</span><span class="pl-k">.</span>class);
bindService(intent, stmServiceConnection, <span class="pl-smi">Context</span><span class="pl-c1"><span class="pl-k">.</span>BIND_AUTO_CREATE</span>);</pre></div>

<p>Unbinding</p>

<div class="highlight highlight-source-java"><pre>unbindService(stmServiceConnection);</pre></div>

<h4>
<a id="androidmanifestxml" class="anchor" href="#androidmanifestxml" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>AndroidManifest.xml</h4>

<p>The StmService gets the Shout to Me client token from metadata in the AndroidManifest.xml.  Optionally, you can wire up the channel ID if your app will only use one channel. Be sure to set your own string resources.</p>

<div class="highlight highlight-text-xml"><pre>&lt;<span class="pl-ent">service</span>
    <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>me.shoutto.sdk.StmService<span class="pl-pds">"</span></span>
    <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">exported</span>=<span class="pl-s"><span class="pl-pds">"</span>false<span class="pl-pds">"</span></span>&gt;

    &lt;<span class="pl-ent">meta-data</span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>me.shoutto.sdk.CLIENT_TOKEN<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>@string/client_token<span class="pl-pds">"</span></span> /&gt;

    <span class="pl-c">&lt;!-- Optional --&gt;</span>
    &lt;<span class="pl-ent">meta-data</span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>me.shoutto.sdk.CHANNEL_ID<span class="pl-pds">"</span></span>
        <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>@string/channel_id<span class="pl-pds">"</span></span> /&gt;
&lt;/<span class="pl-ent">service</span>&gt;</pre></div>

<h4>
<a id="getting-the-users-authentication-token" class="anchor" href="#getting-the-users-authentication-token" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Getting the user's authentication token</h4>

<p>While the SDK is meant to provide easy access to the Shout to Me API service, if you wish to send direct 
requests to the Shout to Me REST API, you will need the user's authentication token.
To get the auth token, call the following method on StmService.  The first time this method is called,
it blocks until the auth token is retrieved.  Therefore, either call this method on a background thread,
or be prepared to handle an error in the event that the auth token has not yet been retrieved.</p>

<p>Once retrieved from the server, the auth token is stored in the device shared preferences to save time on
future retrievals and across app sessions.</p>

<div class="highlight highlight-source-java"><pre>stmService<span class="pl-k">.</span>getUserAuthToken();</pre></div>

<h4>
<a id="refreshing-the-users-authentication-token" class="anchor" href="#refreshing-the-users-authentication-token" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Refreshing the user's authentication token</h4>

<p>The SDK will abstract out much of the authentication tasks for you.  In the rare instance that requests are
returned as unauthorized or when switching between test and production URLs, you can call the following method 
to refresh the user's authentication token.  This is a synchronous method and should be done on a background thread.</p>

<div class="highlight highlight-source-java"><pre>stmService<span class="pl-k">.</span>refreshUserAuthToken();</pre></div>

<h4>
<a id="hand-wave-gesture-initiated-shout-recording" class="anchor" href="#hand-wave-gesture-initiated-shout-recording" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Hand wave gesture initiated Shout recording</h4>

<p>The Shout to Me SDK includes a usability feature design to help make the app safe for driving.  When
enabled, a driver need only wave their hand in front of the phone to launch the
<a href="#stm-recorder-activity">StmRecorderActivity</a>.</p>

<p>The hand wave gesture functionality utilizes the phone's proximity sensor.  Therefore, if a phone
does not have a proximity sensor, or the user has revoked proximity sensor permission, the
functionality will not work.</p>

<p>To enable the hand wave gesture functionality, simply register a listener to the following StmService method:</p>

<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">MainActivity</span> <span class="pl-k">extends</span> <span class="pl-e">Activity</span> <span class="pl-k">implements</span> <span class="pl-e">HandWaveGestureListener</span> {

    <span class="pl-k">private</span> <span class="pl-smi">ServiceConnection</span> stmServiceConnection <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">ServiceConnection</span>() {

        <span class="pl-k">@Override</span>
        <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onServiceConnected</span>(<span class="pl-smi">ComponentName</span> <span class="pl-v">className</span>,
                                       <span class="pl-smi">IBinder</span> <span class="pl-v">service</span>) {
            <span class="pl-smi">StmService</span><span class="pl-k">.</span><span class="pl-smi">StmBinder</span> binder <span class="pl-k">=</span> (<span class="pl-smi">StmService</span><span class="pl-k">.</span><span class="pl-smi">StmBinder</span>) service;
            stmService <span class="pl-k">=</span> binder<span class="pl-k">.</span>getService();
            isStmServiceBound <span class="pl-k">=</span> <span class="pl-c1">true</span>;

            regsiterHandWaveGestureListener();
        }

        <span class="pl-k">@Override</span>
        <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onServiceDisconnected</span>(<span class="pl-smi">ComponentName</span> <span class="pl-v">arg0</span>) {
            isStmServiceBound <span class="pl-k">=</span> <span class="pl-c1">false</span>;
        }
    };

    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onHandWaveGesture</span>() {
        launchRecordingOverlay(<span class="pl-c1">null</span>);
    }

    <span class="pl-k">private</span> <span class="pl-k">void</span> <span class="pl-en">regsiterHandWaveGestureListener</span>() {
        stmService<span class="pl-k">.</span>registerHandGestureListener(<span class="pl-v">this</span>);
    }
}</pre></div>

<p>Once enabled, the Shout to Me SDK continues to listen for events from the proximity sensor.
Un-registering the listener will turn off the proximity event listening, thereby conserving device
resources.</p>

<div class="highlight highlight-source-java"><pre>stmService<span class="pl-k">.</span>unregisterHandGestureListener(<span class="pl-v">this</span>);</pre></div>

<p>Note that you can specify more than one hand wave gesture listener if you want to take advantage
of the functionality, however, be sure to un-register them all to effectively turn off the
proximity sensor event listening.</p>

<h3>
<a id="callback" class="anchor" href="#callback" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a><a name="callback"></a>Callback</h3>

<p>The Android system <a href="http://developer.android.com/guide/components/processes-and-threads.html">does not allow asynchronous calls to be made on the main (UI) thread</a>. The Callback class is used to provide methods you would like to have executed following the asynchronous calls to the Shout to Me service.  Callback is an abstract class with two methods that can be overridden.  </p>

<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-k">abstract</span> <span class="pl-k">class</span> <span class="pl-en">Callback</span>&lt;T&gt; <span class="pl-k">implements</span> <span class="pl-e">StmCallback&lt;<span class="pl-smi">T</span>&gt;</span> {

    <span class="pl-k">public</span> <span class="pl-k">abstract</span> <span class="pl-k">void</span> <span class="pl-en">onSuccess</span>(<span class="pl-k">StmResponse&lt;<span class="pl-smi">T</span>&gt;</span> <span class="pl-v">stmResponse</span>);
    <span class="pl-k">public</span> <span class="pl-k">abstract</span> <span class="pl-k">void</span> <span class="pl-en">onFailure</span>(<span class="pl-smi">StmError</span> <span class="pl-v">stmError</span>);
}</pre></div>

<h3>
<a id="stmerror" class="anchor" href="#stmerror" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>StmError</h3>

<p>The StmError class encapsulates information in the event of an error during asynchronous processing.  It is provided to the Callback <code>onFailure</code> method.  A "blocking error" occurs when the system determines that the client application cannot continue using Shout to Me functionality, such as if the Shout to Me service is unreachable.</p>

<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">StmError</span> {

    <span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-k">final</span> <span class="pl-smi">String</span> <span class="pl-c1">SEVERITY_MAJOR</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>major<span class="pl-pds">"</span></span>;
    <span class="pl-k">public</span> <span class="pl-k">static</span> <span class="pl-k">final</span> <span class="pl-smi">String</span> <span class="pl-c1">SEVERITY_MINOR</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>minor<span class="pl-pds">"</span></span>;

    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">getMessage</span>() {
        <span class="pl-k">return</span> message;
    }

    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">getSeverity</span>() {
        <span class="pl-k">return</span> severity;
    }

    <span class="pl-k">public</span> <span class="pl-k">boolean</span> <span class="pl-en">isBlockingError</span>() {
        <span class="pl-k">return</span> blockingError;
    }
}</pre></div>

<h3>
<a id="user" class="anchor" href="#user" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>User</h3>

<p>The User object represents the Shout to Me user entity that is bound to your application.  Although you may have your own user domain objects, Shout to Me still needs a context in which to create shouts, accumulate statistics, etc.  A Shout to Me user created by your mobile app will be unique to your system.  For example, if a mobile user has installed two apps that utilize the Shout to Me SDK on the same phone, there will be two distinct Shout to Me users, one for each app.  Much of the generic code around creating and authenticating the user is hidden from you by the SDK to make your life easier.  However, there are a few items that do need to be exposed, such as setting a user handle to match the handle in your system.</p>

<p>Retrieving the user object from StmService can be done with or without a <a href="#callback">Callback</a>. Retrieving the user object without a <a href="#callback">Callback</a> does not guarantee that the user object will have been initialized by the service, however, it is convenient for certain scenarios such as wanting to change the user's handle.</p>

<div class="highlight highlight-source-java"><pre><span class="pl-c">// Without a callback</span>
<span class="pl-smi">User</span> user <span class="pl-k">=</span> stmService<span class="pl-k">.</span>getUser()

<span class="pl-c">// With a callback</span>
stmService<span class="pl-k">.</span>getUser(<span class="pl-k">new</span> <span class="pl-k">Callback&lt;<span class="pl-smi">User</span>&gt;</span>() {
    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onSuccess</span>(<span class="pl-k">final</span> <span class="pl-k">StmResponse&lt;<span class="pl-smi">User</span>&gt;</span> <span class="pl-v">stmResponse</span>) {
        <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>Shout to Me user has been loaded<span class="pl-pds">"</span></span>);

    <span class="pl-smi">User</span> user <span class="pl-k">=</span> stmResponse<span class="pl-k">.</span>get();
    <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>User's handle is: <span class="pl-pds">"</span></span> <span class="pl-k">+</span> user<span class="pl-k">.</span>getHandle());
    }

    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onFailure</span>(<span class="pl-k">final</span> <span class="pl-smi">StmError</span> <span class="pl-v">stmError</span>) {
        <span class="pl-smi">Log</span><span class="pl-k">.</span>w(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>Could not retrieve Shout to Me user.<span class="pl-pds">"</span></span>);
    }
});</pre></div>

<p>Retrieving and updating the user’s handle.  Calling <code>save(Callback&lt;User&gt;)</code> is required to persist the new handle to the Shout to Me service.</p>

<div class="highlight highlight-source-java"><pre><span class="pl-smi">String</span> handle <span class="pl-k">=</span> user<span class="pl-k">.</span>getHandle();

<span class="pl-smi">User</span> user <span class="pl-k">=</span> stmService<span class="pl-k">.</span>getUser();
user<span class="pl-k">.</span>setHandle(<span class="pl-s"><span class="pl-pds">"</span>BobSmith<span class="pl-pds">"</span></span>);
user<span class="pl-k">.</span>save(<span class="pl-k">new</span> <span class="pl-k">Callback&lt;<span class="pl-smi">User</span>&gt;</span>() {
    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onSuccess</span>(<span class="pl-k">final</span> <span class="pl-k">StmResponse&lt;<span class="pl-smi">User</span>&gt;</span> <span class="pl-v">stmResponse</span>) {
        <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>User handle update was successful. Handle is <span class="pl-pds">"</span></span> <span class="pl-k">+</span> stmResponse<span class="pl-k">.</span>get()<span class="pl-k">.</span>getHandle());
    }

    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onFailure</span>(<span class="pl-k">final</span> <span class="pl-smi">StmError</span> <span class="pl-v">stmError</span>) {
        <span class="pl-smi">Log</span><span class="pl-k">.</span>w(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>Could not save changes to user. Message is: <span class="pl-pds">"</span></span> <span class="pl-k">+</span> stmError<span class="pl-k">.</span>getMessage());
    }
});</pre></div>

<h3>
<a id="shout" class="anchor" href="#shout" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Shout</h3>

<p>The Shout object represents the recording a user created and its metadata in the Shout to Me system.  Although generally a read-only object to the mobile user, an administrative user can make updates to it, such as making it public or private, and queuing it to be played on-air.</p>

<p>Currently the only time a client app will interact with a Shout is in the <a href="#stm-recorder-activity">StmRecorderActivity</a> callback.  </p>

<p>Deleting a shout</p>

<div class="highlight highlight-source-java"><pre>shout<span class="pl-k">.</span>delete(<span class="pl-k">new</span> <span class="pl-k">Callback&lt;<span class="pl-smi">String</span>&gt;</span>() {
    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onSuccess</span>(<span class="pl-k">StmResponse&lt;<span class="pl-smi">String</span>&gt;</span> <span class="pl-v">stmResponse</span>) {
        <span class="pl-k">if</span> (stmResponse<span class="pl-k">.</span>get()<span class="pl-k">.</span>equals(<span class="pl-s"><span class="pl-pds">"</span>success<span class="pl-pds">"</span></span>)) {
            <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>Deletion of shout succeeded.<span class="pl-pds">"</span></span>);
        }
    }

    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onFailure</span>(<span class="pl-smi">StmError</span> <span class="pl-v">stmError</span>) {
        <span class="pl-smi">Log</span><span class="pl-k">.</span>e(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>Error occurred deleting shout. Error message: <span class="pl-pds">"</span></span> <span class="pl-k">+</span> stmError<span class="pl-k">.</span>getMessage());
    }
});</pre></div>

<h3>
<a id="channel" class="anchor" href="#channel" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a><a name="channel"></a>Channel</h3>

<p>The Channel object represents one or more channels that you may have configured in your Shout to Me account.  The Channel object contains metadata and default configuration values that can be used to display information to your users.</p>

<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">Channel</span> {

    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">getId</span>()

    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">getName</span>()

    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">getDescription</span>()

    <span class="pl-c">// The URL of an image that can be used to show the user what channel they are on</span>
    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">getImageUrl</span>()

    <span class="pl-c">// A smaller version of the channel image to display in lists</span>
    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">getListImageUrl</span>()

    <span class="pl-c">// The maximum recording length in seconds allowed for the channel</span>
    <span class="pl-k">public</span> <span class="pl-k">int</span> <span class="pl-en">getDefaultMaxRecordingLengthSeconds</span>()
}</pre></div>

<p>Retrieving channels</p>

<div class="highlight highlight-source-java"><pre>stmService<span class="pl-k">.</span>getChannels(<span class="pl-k">new</span> <span class="pl-k">Callback&lt;<span class="pl-k">List&lt;<span class="pl-smi">Channel</span>&gt;</span>&gt;</span>() {
    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onSuccess</span>(<span class="pl-k">StmResponse&lt;<span class="pl-k">List&lt;<span class="pl-smi">Channel</span>&gt;</span>&gt;</span> <span class="pl-v">stmResponse</span>) {
        <span class="pl-k">List&lt;<span class="pl-smi">Channel</span>&gt;</span> channels <span class="pl-k">=</span> stmResponse<span class="pl-k">.</span>get();
        <span class="pl-k">for</span> (<span class="pl-smi">Channel</span> channel <span class="pl-k">:</span> channels) {
            <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>Image URL for <span class="pl-pds">"</span></span> <span class="pl-k">+</span> channel<span class="pl-k">.</span>getName() <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span> is <span class="pl-pds">"</span></span> <span class="pl-k">+</span> channel<span class="pl-k">.</span>getImageUrl());
        }
    }

    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onFailure</span>(<span class="pl-smi">StmError</span> <span class="pl-v">stmError</span>) {
        <span class="pl-smi">Log</span><span class="pl-k">.</span>w(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>Could not retrieve channel list<span class="pl-pds">"</span></span>);
    }
});</pre></div>

<h4>
<a id="channel-subscriptions" class="anchor" href="#channel-subscriptions" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Channel Subscriptions</h4>

<p>A subscription to a channel indicates that push notifications will be sent to the app when a broadcaster
publishes a channel-wide message.  The SDK provides a way for the client app to subscribe, unsubscribe and
tell if the user is currently subscribed or not.  This can be used in an app setting to allow the user
control over their subscription status.</p>

<p>Determining subscription status</p>

<div class="highlight highlight-source-java"><pre>channel<span class="pl-k">.</span>isSubscribed(<span class="pl-k">new</span> <span class="pl-k">Callback&lt;<span class="pl-smi">Boolean</span>&gt;</span>() {
    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onSuccess</span>(<span class="pl-k">StmResponse&lt;<span class="pl-smi">Boolean</span>&gt;</span> <span class="pl-v">isSubscribedResponse</span>) {
        <span class="pl-k">if</span> (isSubscribedResponse<span class="pl-k">.</span>get()) {
            <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>User is subscribed to channel<span class="pl-pds">"</span></span>);
        } <span class="pl-k">else</span> {
            <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>User is not subscribed to channel<span class="pl-pds">"</span></span>);
        }
    }

    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onFailure</span>(<span class="pl-smi">StmError</span> <span class="pl-v">stmError</span>) {
        <span class="pl-smi">Log</span><span class="pl-k">.</span>w(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>An error occurred checking user's subscribed status. <span class="pl-pds">"</span></span> <span class="pl-k">+</span> stmError<span class="pl-k">.</span>getMessage());
    }
});</pre></div>

<p>Subscribing to a channel</p>

<div class="highlight highlight-source-java"><pre>channel<span class="pl-k">.</span>subscribe(<span class="pl-k">new</span> <span class="pl-k">Callback&lt;<span class="pl-smi">Void</span>&gt;</span>() {
    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onSuccess</span>(<span class="pl-k">StmResponse&lt;<span class="pl-smi">Void</span>&gt;</span> <span class="pl-v">subscribeResponse</span>) {
        <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>User is now subscribed<span class="pl-pds">"</span></span>);
    }

    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onFailure</span>(<span class="pl-smi">StmError</span> <span class="pl-v">stmError</span>) {
        <span class="pl-smi">Log</span><span class="pl-k">.</span>w(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>An error occurred subscribing to channel. <span class="pl-pds">"</span></span> <span class="pl-k">+</span> stmError<span class="pl-k">.</span>getMessage());
    }
});</pre></div>

<p>Unsubscribing to a channel</p>

<div class="highlight highlight-source-java"><pre>channel<span class="pl-k">.</span>unsubscribe(<span class="pl-k">new</span> <span class="pl-k">Callback&lt;<span class="pl-smi">Void</span>&gt;</span>() {
    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onSuccess</span>(<span class="pl-k">StmResponse&lt;<span class="pl-smi">Void</span>&gt;</span> <span class="pl-v">unsubscribeResponse</span>) {
        <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>User is now unsubscribed.<span class="pl-pds">"</span></span>);
    }

    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onFailure</span>(<span class="pl-smi">StmError</span> <span class="pl-v">stmError</span>) {
        <span class="pl-smi">Log</span><span class="pl-k">.</span>w(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>An error occurred unsubscribing to channel. <span class="pl-pds">"</span></span> <span class="pl-k">+</span> stmError<span class="pl-k">.</span>getMessage());
    }
});</pre></div>

<h3>
<a id="message" class="anchor" href="#message" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Message</h3>

<p>The Message object represents text or audio messages that can be sent from broadcasters to users.  A
user may receive messages from more than one channel if the client app supports multiple channels.</p>

<div class="highlight highlight-source-java"><pre><span class="pl-k">public</span> <span class="pl-k">class</span> <span class="pl-en">Message</span> {

    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">getId</span>()

    <span class="pl-k">public</span> <span class="pl-smi">Channel</span> <span class="pl-en">getChannel</span>()

    <span class="pl-c">// The actual message text</span>
    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">getMessage</span>()

    <span class="pl-c">// The name of the sender.  May be null if was sent via a channel-wide notification</span>
    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">getSenderName</span>()

    <span class="pl-k">public</span> <span class="pl-smi">Date</span> <span class="pl-en">getSentDate</span>()

    <span class="pl-c">// A reference to a Shout to Me conversation.  May be null</span>
    <span class="pl-k">public</span> <span class="pl-smi">String</span> <span class="pl-en">getConversationId</span>()
}</pre></div>

<p>Retrieving messages</p>

<p>A maximum of 1000 messages will be returned.</p>

<div class="highlight highlight-source-java"><pre>stmService<span class="pl-k">.</span>getMessages(<span class="pl-k">new</span> <span class="pl-k">Callback&lt;<span class="pl-k">List&lt;<span class="pl-smi">Message</span>&gt;</span>&gt;</span>() {
    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onSuccess</span>(<span class="pl-k">StmResponse&lt;<span class="pl-k">List&lt;<span class="pl-smi">Message</span>&gt;</span>&gt;</span> <span class="pl-v">messagesResponse</span>) {
        <span class="pl-k">List&lt;<span class="pl-smi">Message</span>&gt;</span> messageList <span class="pl-k">=</span> messagesResponse<span class="pl-k">.</span>get();
        <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>Number of messages = <span class="pl-pds">"</span></span> <span class="pl-k">+</span> <span class="pl-smi">String</span><span class="pl-k">.</span>valueOf(messageList<span class="pl-k">.</span>size()));
    }

    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onFailure</span>(<span class="pl-smi">StmError</span> <span class="pl-v">stmError</span>) {
        <span class="pl-smi">Log</span><span class="pl-k">.</span>w(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>Could not retrieve message list<span class="pl-pds">"</span></span>);
    }
});</pre></div>

<p>Creating a message</p>

<p>At certain times a client app may need to create a message for persistence in the user's message records.
A Builder class is provided to help with this.</p>

<div class="highlight highlight-source-java"><pre>stmService<span class="pl-k">.</span>getMessageBuilder()
    .channelId(channelId)
    .conversationId(conversationId)
    .message(messageBody)
    .recipientId(stmService<span class="pl-k">.</span>getUser()<span class="pl-k">.</span>getId())
    .create(<span class="pl-k">new</span> <span class="pl-k">Callback&lt;<span class="pl-smi">Message</span>&gt;</span>() {
        <span class="pl-k">@Override</span>
        <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onSuccess</span>(<span class="pl-k">StmResponse&lt;<span class="pl-smi">Message</span>&gt;</span> <span class="pl-v">response</span>) {
            <span class="pl-smi">Message</span> message <span class="pl-k">=</span> response<span class="pl-k">.</span>get();
            <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>Message created successfully <span class="pl-pds">"</span></span> <span class="pl-k">+</span> message<span class="pl-k">.</span>getId());
        }

        <span class="pl-k">@Override</span>
        <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onFailure</span>(<span class="pl-smi">StmError</span> <span class="pl-v">stmError</span>) {
            <span class="pl-smi">Log</span><span class="pl-k">.</span>w(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>Error creating message <span class="pl-pds">"</span></span> <span class="pl-k">+</span> stmError<span class="pl-k">.</span>getMessage());
        }
    });</pre></div>

<h3>
<a id="stmrecorderactivity" class="anchor" href="#stmrecorderactivity" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a><a name="stm-recorder-activity"></a>StmRecorderActivity</h3>

<p>The StmRecorderActivity is a native Android <a href="http://developer.android.com/reference/android/app/Activity.html">Activity</a> used to quickly and easily enable recording in a client app.  When the StmRecorderActivity is launched, the following will occur:</p>

<ol>
<li>The StmRecorderActivity is displayed to the user</li>
<li>Audio recording immediately begins</li>
<li>The user is presented with two options

<ul>
<li>A “Done” button; when pressed, this will stop the recording and send the recorded audio to the server.  The StmRecorderActivity will then be closed.</li>
<li>A “Cancel” icon; when pressed, the recording will be stopped and the StmRecorderActivity will be closed.</li>
</ul>
</li>
</ol>

<p>There is also the ability to provide an optional callback if you would like to receive an Shout object following the creation of the shout.</p>

<div class="highlight highlight-source-java"><pre>stmService<span class="pl-k">.</span>setShoutCreationCallback(<span class="pl-k">new</span> <span class="pl-k">Callback&lt;<span class="pl-smi">Shout</span>&gt;</span>() {
    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onSuccess</span>(<span class="pl-k">StmResponse&lt;<span class="pl-smi">Shout</span>&gt;</span> <span class="pl-v">stmResponse</span>) {
        <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>Shout created successfully. ID = <span class="pl-pds">"</span></span> <span class="pl-k">+</span> stmResponse<span class="pl-k">.</span>get()<span class="pl-k">.</span>getId());
        shout <span class="pl-k">=</span> stmResponse<span class="pl-k">.</span>get();
    }

    <span class="pl-k">@Override</span>
    <span class="pl-k">public</span> <span class="pl-k">void</span> <span class="pl-en">onFailure</span>(<span class="pl-smi">StmError</span> <span class="pl-v">stmError</span>) {
        <span class="pl-smi">Log</span><span class="pl-k">.</span>e(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>An error occurred during shout creation. Message is <span class="pl-pds">"</span></span> <span class="pl-k">+</span> stmError<span class="pl-k">.</span>getMessage());
    }
});</pre></div>

<h4>
<a id="launching-the-stmrecorderactivity" class="anchor" href="#launching-the-stmrecorderactivity" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Launching the StmRecorderActivity</h4>

<p>Launching the StmRecorderActivity is done using standard Android Activity functionality.  You can pass in certain extras to provide additional data.</p>

<ol>
<li>StmRecorderActivity.MAX_RECORDING_TIME_IN_SECONDS - This extra is required. Maximum recording times can be found in <a href="#channel">Channel</a> data.  Please note that the Shout to Me system currently does not support recording times over 1 minute.</li>
<li>StmRecorderActivity.TAGS - A comma separated list of tags that will flow through to the Broadcaster Application.</li>
<li>StmRecorderActivity.TOPIC - A topic that will flow through to the Broadcaster Application.</li>
</ol>

<div class="highlight highlight-source-java"><pre><span class="pl-smi">Intent</span> intent <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-smi">Intent</span>(<span class="pl-v">this</span>, <span class="pl-smi">StmRecorderActivity</span><span class="pl-k">.</span>class);
intent<span class="pl-k">.</span>putExtra(<span class="pl-smi">StmRecorderActivity</span><span class="pl-c1"><span class="pl-k">.</span>MAX_RECORDING_TIME_IN_SECONDS</span>, maxRecordingLengthSeconds);  <span class="pl-c">// Required</span>
intent<span class="pl-k">.</span>putExtra(<span class="pl-smi">StmRecorderActivity</span><span class="pl-c1"><span class="pl-k">.</span>TAGS</span>, tags);                                                <span class="pl-c">// Optional</span>
intent<span class="pl-k">.</span>putExtra(<span class="pl-smi">StmRecorderActivity</span><span class="pl-c1"><span class="pl-k">.</span>TOPIC</span>, topic);                                              <span class="pl-c">// Optional</span>
startActivityForResult(intent, <span class="pl-c1">1</span>); </pre></div>

<h4>
<a id="handling-the-activity-result-of-stmrecorderactivity" class="anchor" href="#handling-the-activity-result-of-stmrecorderactivity" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Handling the Activity result of StmRecorderActivity</h4>

<p>The StmRecorderActivity uses the standard Android callback to indicate whether the Activity was closed OK, or whether the action was cancelled.  In addition, the StmRecorderActivity will provide data to confirm whether or not the recording process completed successfully or not.  The example below shows how to detect the StmRecorderActivity.RECORD_AUDIO_PERMISSION_DENIED failure.</p>

<div class="highlight highlight-source-java"><pre><span class="pl-k">protected</span> <span class="pl-k">void</span> onActivityResult(<span class="pl-k">int</span> requestCode, <span class="pl-k">int</span> resultCode, <span class="pl-smi">Intent</span> data) {

    <span class="pl-k">if</span> (requestCode <span class="pl-k">==</span> <span class="pl-c1">MY_REQUEST_CODE</span>) {
        <span class="pl-k">if</span> (resultCode <span class="pl-k">==</span> <span class="pl-c1">RESULT_OK</span>){
            <span class="pl-smi">String</span> recordingResult <span class="pl-k">=</span> data<span class="pl-k">.</span>getStringExtra(<span class="pl-smi">StmRecorderActivity</span><span class="pl-c1"><span class="pl-k">.</span>ACTIVITY_RESULT</span>);
            <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>The recording overlay has closed successfully. Result is: <span class="pl-pds">"</span></span> <span class="pl-k">+</span> recordingResult);

            <span class="pl-k">if</span> (recordingResult<span class="pl-k">.</span>equals(<span class="pl-smi">StmService</span><span class="pl-c1"><span class="pl-k">.</span>FAILURE</span>)) {
                <span class="pl-smi">String</span> failureReasonCode <span class="pl-k">=</span> data<span class="pl-k">.</span>getStringExtra(<span class="pl-smi">StmRecorderActivity</span><span class="pl-c1"><span class="pl-k">.</span>ACTIVITY_REASON</span>);
                <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>Failure code: <span class="pl-pds">"</span></span> <span class="pl-k">+</span> failureReasonCode);
                    <span class="pl-k">if</span> (failureReasonCode<span class="pl-k">.</span>equals(<span class="pl-smi">StmRecorderActivity</span><span class="pl-c1"><span class="pl-k">.</span>RECORD_AUDIO_PERMISSION_DENIED</span>)) {

                        <span class="pl-smi">Log</span><span class="pl-k">.</span>w(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>User has not granted the RECORD_AUDIO permission<span class="pl-pds">"</span></span>);
                    }
                } 
       }
       <span class="pl-k">if</span> (resultCode <span class="pl-k">==</span> <span class="pl-c1">RESULT_CANCELED</span>) {
           <span class="pl-c">// Write your code if there's no result</span>
           <span class="pl-smi">Log</span><span class="pl-k">.</span>d(<span class="pl-c1">TAG</span>, <span class="pl-s"><span class="pl-pds">"</span>recording cancelled<span class="pl-pds">"</span></span>);
       }
    }
}</pre></div>

<h3>
<a id="notifications" class="anchor" href="#notifications" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Notifications</h3>

<p>The Shout to Me SDK supports receiving push notifications from the Shout to Me platform.  There are a number of technologies used in receiving notifications, and consequently, there are a number of items that need to be wired up. The following high level steps occur in the notifications system:</p>

<ol>
<li>A notification is received from GCM</li>
<li>The SDK processes the notification and may do one of two things:
a. Immediately broadcast a message to the client app
b. Create a geofence which may be triggered later if and when a user enters the geofence area</li>
<li>A listener in the client app receives a broadcast and displays data to the mobile user</li>
</ol>

<h4>
<a id="gcm" class="anchor" href="#gcm" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>GCM</h4>

<p>The Shout to Me system uses (GCM)[<a href="https://developers.google.com/cloud-messaging/">https://developers.google.com/cloud-messaging/</a>] to send and receive messages. Add the following to your AndroidManifest.xml if you wish to receive notifications.  Be sure to set your own values for the string resource references.  Check with Shout to Me support for specific values to use.</p>

<div class="highlight highlight-text-xml"><pre>&lt;<span class="pl-ent">service</span>
    <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>me.shoutto.sdk.GcmNotificationRegistrationIntentService<span class="pl-pds">"</span></span>
    <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">exported</span>=<span class="pl-s"><span class="pl-pds">"</span>false<span class="pl-pds">"</span></span>&gt;
    &lt;<span class="pl-ent">meta-data</span> <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>me.shoutto.sdk.GcmDefaultSenderId<span class="pl-pds">"</span></span> <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>@string/gcm_default_sender_id<span class="pl-pds">"</span></span> /&gt;
    &lt;<span class="pl-ent">meta-data</span> <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>me.shoutto.sdk.PlatformApplicationArn<span class="pl-pds">"</span></span> <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>@string/platform_application_arn<span class="pl-pds">"</span></span> /&gt;
    &lt;<span class="pl-ent">meta-data</span> <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>me.shoutto.sdk.IdentityPoolId<span class="pl-pds">"</span></span> <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">value</span>=<span class="pl-s"><span class="pl-pds">"</span>@string/identity_pool_id<span class="pl-pds">"</span></span> /&gt;
&lt;/<span class="pl-ent">service</span>&gt;

<span class="pl-c">&lt;!-- [START gcm_receiver] --&gt;</span>
&lt;<span class="pl-ent">receiver</span>
    <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>com.google.android.gms.gcm.GcmReceiver<span class="pl-pds">"</span></span>
    <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">exported</span>=<span class="pl-s"><span class="pl-pds">"</span>true<span class="pl-pds">"</span></span>
    <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">permission</span>=<span class="pl-s"><span class="pl-pds">"</span>com.google.android.c2dm.permission.SEND<span class="pl-pds">"</span></span>&gt;
    &lt;<span class="pl-ent">intent-filter</span>&gt;
        &lt;<span class="pl-ent">action</span> <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>com.google.android.c2dm.intent.RECEIVE<span class="pl-pds">"</span></span> /&gt;
        &lt;<span class="pl-ent">category</span> <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>me.shoutto.sdk<span class="pl-pds">"</span></span> /&gt;
    &lt;/<span class="pl-ent">intent-filter</span>&gt;
&lt;/<span class="pl-ent">receiver</span>&gt;
<span class="pl-c">&lt;!-- [END gcm_receiver] --&gt;</span>


<span class="pl-c">&lt;!-- [START gcm_listener] --&gt;</span>
&lt;<span class="pl-ent">service</span>
    <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>me.shoutto.sdk.StmGcmListenerService<span class="pl-pds">"</span></span>
    <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">exported</span>=<span class="pl-s"><span class="pl-pds">"</span>false<span class="pl-pds">"</span></span>&gt;
    &lt;<span class="pl-ent">intent-filter</span>&gt;
        &lt;<span class="pl-ent">action</span> <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>com.google.android.c2dm.intent.RECEIVE<span class="pl-pds">"</span></span> /&gt;
    &lt;/<span class="pl-ent">intent-filter</span>&gt;
&lt;/<span class="pl-ent">service</span>&gt;
<span class="pl-c">&lt;!-- [END gcm_listener] --&gt;</span>


<span class="pl-c">&lt;!-- [START instanceId_listener] --&gt;</span>
&lt;<span class="pl-ent">service</span>
    <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>me.shoutto.sdk.GcmInstanceIDListenerService<span class="pl-pds">"</span></span>
    <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">exported</span>=<span class="pl-s"><span class="pl-pds">"</span>false<span class="pl-pds">"</span></span>&gt;
    &lt;<span class="pl-ent">intent-filter</span>&gt;
        &lt;<span class="pl-ent">action</span> <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>com.google.android.gms.iid.InstanceID<span class="pl-pds">"</span></span> /&gt;
    &lt;/<span class="pl-ent">intent-filter</span>&gt;
&lt;/<span class="pl-ent">service</span>&gt;
<span class="pl-c">&lt;!-- [END instanceId_listener] --&gt;</span></pre></div>

<h4>
<a id="geofencing" class="anchor" href="#geofencing" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Geofencing</h4>

<p>Location based notifications will be created as (geofences)[<a href="https://developers.google.com/android/reference/com/google/android/gms/location/Geofence">https://developers.google.com/android/reference/com/google/android/gms/location/Geofence</a>] in the Shout to Me SDK.  Add this to your AndroidManifest.xml to allow the SDK to listen for geofence events:</p>

<div class="highlight highlight-text-xml"><pre>&lt;<span class="pl-ent">service</span> <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>me.shoutto.sdk.GeofenceTransitionsIntentService<span class="pl-pds">"</span></span> /&gt;</pre></div>

<h4>
<a id="shout-to-me-broadcasts" class="anchor" href="#shout-to-me-broadcasts" aria-hidden="true"><span aria-hidden="true" class="octicon octicon-link"></span></a>Shout to Me Broadcasts</h4>

<p>The Shout to Me SDK uses a standard Android broadcast to send the processed message data to client apps.  Add the following to your AndroidManifest.xml to listen for these broadcasts.  Of course, you will need to supply your own listener class. In this example, it is called StmNotificationReceiver.</p>

<div class="highlight highlight-text-xml"><pre>&lt;<span class="pl-ent">receiver</span>
    <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>.StmNotificationReceiver<span class="pl-pds">"</span></span>
    <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">exported</span>=<span class="pl-s"><span class="pl-pds">"</span>false<span class="pl-pds">"</span></span>&gt;
    &lt;<span class="pl-ent">intent-filter</span>&gt;
        &lt;<span class="pl-ent">action</span> <span class="pl-e">android</span><span class="pl-e">:</span><span class="pl-e">name</span>=<span class="pl-s"><span class="pl-pds">"</span>me.shoutto.sdk.EVENT_MESSAGE_NOTIFICATION_RECEIVED<span class="pl-pds">"</span></span> /&gt;
    &lt;/<span class="pl-ent">intent-filter</span>&gt;
&lt;/<span class="pl-ent">receiver</span>&gt;</pre></div>

<p>The broadcast receiver class should include something similar to the following to retrieve the broadcast data:</p>

<div class="highlight highlight-source-java"><pre><span class="pl-k">@Override</span>
<span class="pl-k">public</span> <span class="pl-k">void</span> onReceive(<span class="pl-smi">Context</span> context, <span class="pl-smi">Intent</span> intent) {
    <span class="pl-smi">Bundle</span> data <span class="pl-k">=</span> intent<span class="pl-k">.</span>getExtras();
    body <span class="pl-k">=</span> data<span class="pl-k">.</span>getString(<span class="pl-smi">MessageNotificationIntentWrapper</span><span class="pl-c1"><span class="pl-k">.</span>EXTRA_NOTIFICATION_BODY</span>);
    channelId <span class="pl-k">=</span> data<span class="pl-k">.</span>getString(<span class="pl-smi">MessageNotificationIntentWrapper</span><span class="pl-c1"><span class="pl-k">.</span>EXTRA_CHANNEL_ID</span>);
    channelImageUrl <span class="pl-k">=</span> data<span class="pl-k">.</span>getString(<span class="pl-smi">MessageNotificationIntentWrapper</span><span class="pl-c1"><span class="pl-k">.</span>EXTRA_CHANNEL_IMAGE_URL</span>);
    title <span class="pl-k">=</span> data<span class="pl-k">.</span>getString(<span class="pl-smi">MessageNotificationIntentWrapper</span><span class="pl-c1"><span class="pl-k">.</span>EXTRA_NOTIFICATION_TITLE</span>);
    type <span class="pl-k">=</span> data<span class="pl-k">.</span>getString(<span class="pl-smi">MessageNotificationIntentWrapper</span><span class="pl-c1"><span class="pl-k">.</span>EXTRA_NOTIFICATION_TYPE</span>);
}</pre></div>

      <footer class="site-footer">
        <span class="site-footer-owner"><a href="https://github.com/ShoutToMe/stm-sdk-android">stm-sdk-android</a> is maintained by <a href="https://github.com/ShoutToMe">ShoutToMe</a>.</span>

        <span class="site-footer-credits">This page was generated by <a href="https://pages.github.com">GitHub Pages</a> using the <a href="https://github.com/jasonlong/cayman-theme">Cayman theme</a> by <a href="https://twitter.com/jasonlong">Jason Long</a>.</span>
      </footer>

    </section>

  
  </body>
</html>
